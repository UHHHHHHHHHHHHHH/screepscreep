"use strict";var e;function o(e){var o,r;const t=null!==(r=null===(o=e.controller)||void 0===o?void 0:o.level)&&void 0!==r?r:0;if(t<2)return 1;const n=e.find(FIND_SOURCES).length,i=e.find(FIND_MY_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length,a=e.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_CONTAINER}).length;return i<5||a<n?2:t<3?2.5:3===t?3:3.5}function r(e){const o={harvester:0,upgrader:0,builder:0,miner:0,hauler:0};for(const r of Object.values(Game.creeps)){if(r.room.name!==e.name)continue;const t=r.memory.role;void 0!==o[t]&&o[t]++}return o}function t(e){return e.memory.resourceStats&&e.memory.resourceStats.tickLastUpdated===Game.time||function(e){e.memory.resourceStats||(e.memory.resourceStats={energyInStructures:0,energyInPiles:0,energyInTransit:0,totalEnergy:0,energyAvailable:0,energyCapacityAvailable:0,tickLastUpdated:0});const o=e.memory.resourceStats,r=e.find(FIND_STRUCTURES).reduce(((e,o)=>"store"in o&&o.store.getUsedCapacity(RESOURCE_ENERGY)>0?e+o.store.getUsedCapacity(RESOURCE_ENERGY):e),0),t=e.find(FIND_DROPPED_RESOURCES,{filter:e=>e.resourceType===RESOURCE_ENERGY}).reduce(((e,o)=>e+o.amount),0),n=e.find(FIND_MY_CREEPS).reduce(((e,o)=>{var r;return e+((null===(r=o.store)||void 0===r?void 0:r.getUsedCapacity(RESOURCE_ENERGY))||0)}),0),i=r+t+n;o.energyInStructures=r,o.energyInPiles=t,o.energyInTransit=n,o.totalEnergy=i,o.energyAvailable=e.energyAvailable,o.energyCapacityAvailable=e.energyCapacityAvailable,o.tickLastUpdated=Game.time}(e),e.memory.resourceStats}function n(e){const o=t(e);console.log(`📊 [${e.name}] Energy Stats:\n    ➡️  Available: ${o.energyAvailable} / ${o.energyCapacityAvailable}\n    🏦 In Structures: ${o.energyInStructures}\n    🪙 On Ground:     ${o.energyInPiles}\n    🚚 In Transit:    ${o.energyInTransit}\n    🔄 Total Energy:  ${o.totalEnergy}\n    (Updated tick: ${o.tickLastUpdated})\n    `)}Object.defineProperty(exports,"__esModule",{value:!0}),function(e){e.Harvester="harvester",e.Upgrader="upgrader",e.Builder="builder",e.Miner="miner",e.Hauler="hauler"}(e||(e={}));const i=Object.values(e);function a(r){const t=r.find(FIND_SOURCES);return 0===t.length||t.every((t=>{const n=e=>Object.values(Game.creeps).filter((o=>o.room.name===r.name&&o.memory.role===e&&o.memory.sourceId===t.id)).length;if(n(e.Miner)>=1)return!0;const i=o(r)<2.5?2:0;return i>0&&n(e.Harvester)>=i}))}function s(n){const s=o(n),l=r(n),c=n.find(FIND_CONSTRUCTION_SITES).length,m=n.find(FIND_SOURCES),R=m.length,u=i.reduce(((e,o)=>(e[o]=0,e)),{}),d=t(n),y=(l[e.Miner]||0)>0,E=(l[e.Harvester]||0)>0,f=n.energyAvailable<BODYPART_COST[WORK]+BODYPART_COST[CARRY]+BODYPART_COST[MOVE];if(R>0&&!y&&!E&&f)return console.log(`[${n.name}] EMERGENCY: No income generation and critically low energy (${n.energyAvailable}). Demanding 1 Harvester.`),Object.assign(Object.assign({},u),{[e.Harvester]:1});let T;const g=2*R;switch(s){case 1:T=Object.assign(Object.assign({},u),{[e.Harvester]:g,[e.Upgrader]:a(n)?1:0});break;case 2:let o=0;if(n.memory.containerPositions)for(const e of m)if(n.memory.containerPositions[e.id]){const r=n.memory.containerPositions[e.id];n.lookForAt(LOOK_STRUCTURES,r.x,r.y).some((e=>e.structureType===STRUCTURE_CONTAINER))&&o++}const r=R-o;T=Object.assign(Object.assign({},u),{[e.Miner]:o,[e.Hauler]:o>0?Math.max(1,o)+(d.energyInPiles>750?1:0):0,[e.Harvester]:2*r,[e.Builder]:a(n)&&c>0?Math.min(2,c):0,[e.Upgrader]:a(n)&&0===c&&(o>0||n.energyAvailable>.5*n.energyCapacityAvailable)?1:0});break;case 2.5:T=Object.assign(Object.assign({},u),{[e.Miner]:R,[e.Hauler]:R+(d.energyInPiles>1e3?1:0),[e.Builder]:a(n)&&c>0?Math.min(2,c):0,[e.Upgrader]:a(n)&&0===c?Math.min(3,Math.floor(1.5*n.controller.level)):0});break;default:T=Object.assign(Object.assign({},u),{[e.Miner]:R,[e.Hauler]:R+(d.energyInPiles>1e3?1:0),[e.Builder]:a(n)&&c>0?Math.min(3,Math.ceil(c/5)):0,[e.Upgrader]:a(n)&&0===c?Math.min(6,Math.max(1,8-n.controller.level)):0})}d.energyInPiles>1e3&&T[e.Hauler]<R+1&&(T[e.Hauler]=(T[e.Hauler]||0)+1,T[e.Hauler]=Math.min(T[e.Hauler],R+2)),n.energyAvailable<.3*n.energyCapacityAvailable&&(l[e.Builder]||0)>0&&c>0&&T[e.Builder]>0&&(T[e.Builder]=Math.max(0,(T[e.Builder]||1)-1));const S=n.memory.roleDemandOverrides||{};for(const e of i)void 0!==S[e]&&null!==S[e]&&(T[e]=S[e]);return T}function l(e,o,r){e.memory.roleDemandOverrides||(e.memory.roleDemandOverrides={}),null===r||r<0?void 0!==e.memory.roleDemandOverrides[o]?(delete e.memory.roleDemandOverrides[o],console.log(`[${e.name}] 🗑️ Cleared role demand override for: ${o}`),0===Object.keys(e.memory.roleDemandOverrides).length&&delete e.memory.roleDemandOverrides):console.log(`[${e.name}] Info: No override found for role ${o} to clear.`):(e.memory.roleDemandOverrides[o]=r,console.log(`[${e.name}] 🔧 Set role demand override: ${o} -> ${r}`))}"undefined"!=typeof Game&&(Game.setRoleDemandOverride=l,Game.clearRoleDemandOverride=function(e,o){l(e,o,null)},Game.clearAllDemandOverrides=function(e){e.memory.roleDemandOverrides?(delete e.memory.roleDemandOverrides,console.log(`[${e.name}] 🗑️ Cleared all role demand overrides.`)):console.log(`[${e.name}] Info: No overrides found to clear.`)});const c={harvester:{ratio:{work:3,carry:1,move:1},minEnergyForRatio:400,fallbackBody:[WORK,WORK,CARRY,MOVE]},miner:{ratio:{work:5,move:1},minEnergyForRatio:550,dontRepeatBody:!0},builder:{ratio:{work:2,carry:2,move:2},minEnergyForRatio:400,fallbackBody:[WORK,CARRY,CARRY,MOVE,MOVE]},upgrader:{ratio:{work:3,carry:2,move:3},minEnergyForRatio:550,fallbackBody:[WORK,WORK,CARRY,MOVE]},hauler:{ratio:{carry:6,move:3},minEnergyForRatio:450,fallbackBody:[CARRY,CARRY,CARRY,CARRY,MOVE,MOVE]}};function m(e){return e&&0!==e.length?e.reduce(((e,o)=>e+BODYPART_COST[o]),0):0}function R(o,r){const t=c[o];if(!t){console.log(`ERROR: No RoleConfig found for role: ${o}.`);const e=[WORK,CARRY,MOVE];return r>=m(e)?e:[]}const n=[],i=[];for(const[e,r]of Object.entries(t.ratio))if(void 0!==BODYPART_COST[e]){i.push(e);for(let o=0;o<r;o++)n.push(e)}else console.log(`ERROR: Invalid body part '${e}' in ratio for role ${o}`);const a=m(n);let s=[];if(r<t.minEnergyForRatio||0===a)t.fallbackBody&&t.fallbackBody.length>0&&r>=m(t.fallbackBody)&&(s=[...t.fallbackBody]);else if(t.dontRepeatBody)r>=a&&n.length>0&&n.length<=50&&(s=[...n]);else if(n.length>0){const e=Math.floor(r/a),o=n.length>0?Math.floor(50/n.length):0,t=Math.min(e,o);if(t>0)for(let e=0;e<t;e++)s.push(...n);let l=r-m(s);if(s.length<50&&l>0){let e;do{e=!1;for(const o of i){const r=BODYPART_COST[o];if(l>=r&&s.length<50&&(s.push(o),l-=r,e=!0),s.length>=50)break}}while(e&&s.length<50&&l>=Math.min(...i.map((e=>BODYPART_COST[e]))))}}if(0===s.length&&t.fallbackBody&&t.fallbackBody.length>0&&r>=m(t.fallbackBody)&&(s=[...t.fallbackBody]),0===s.length){let t=[];o===e.Harvester?t=[WORK,CARRY,MOVE]:o===e.Miner&&(t=[WORK,WORK,MOVE]),t.length>0&&r>=m(t)&&(s=t)}if(s.length>0){const e={[TOUGH]:1,[WORK]:2,[ATTACK]:3,[RANGED_ATTACK]:4,[CARRY]:5,[MOVE]:6,[HEAL]:7,[CLAIM]:8};s.sort(((o,r)=>(e[o]||99)-(e[r]||99)))}return s}function u(e){if(!e||0===e.length)return"empty";const o={};for(const r of e)o[r]=(o[r]||0)+1;return[TOUGH,WORK,CARRY,MOVE,ATTACK,RANGED_ATTACK,HEAL,CLAIM].filter((e=>o[e]&&o[e]>0)).map((e=>`${o[e]}${e[0]}`)).join("")}function d(r){if(function(r){const t=r.find(FIND_SOURCES);return 0===t.length||t.every((t=>{if(Object.values(Game.creeps).filter((o=>o.room.name===r.name&&o.memory.role===e.Miner&&o.memory.sourceId===t.id)).length>=1)return!0;const n=o(r);if(n<2.5){if(Object.values(Game.creeps).filter((o=>o.room.name===r.name&&o.memory.role===e.Harvester&&o.memory.sourceId===t.id)).length>=(n<2?2:1))return!0}return!1}))}(r))return!0;return r.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_CONTAINER&&e.store.getUsedCapacity(RESOURCE_ENERGY)>50}).length>0||r.energyAvailable>.8*r.energyCapacityAvailable}function y(e,o,r,t){const n=e.find(FIND_SOURCES),i={};for(const e of n)i[e.id]=0;for(const r in Game.creeps){const t=Game.creeps[r];t.room.name===e.name&&t.memory.role===o&&t.memory.sourceId&&void 0!==i[t.memory.sourceId]&&i[t.memory.sourceId]++}for(const e of t)e.memory.role===o&&e.memory.sourceId&&void 0!==i[e.memory.sourceId]&&i[e.memory.sourceId]++;const a=n.find((e=>(i[e.id]||0)<r));return(null==a?void 0:a.id)||null}function E(o,r){const t=o.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_CONTAINER});if(0===t.length)return null;const n={};for(const e of t)n[e.id]=0;for(const r in Game.creeps){const t=Game.creeps[r];t.room.name===o.name&&t.memory.role===e.Hauler&&t.memory.containerId&&void 0!==n[t.memory.containerId]&&n[t.memory.containerId]++}for(const o of r)o.memory.role===e.Hauler&&o.memory.containerId&&void 0!==n[o.memory.containerId]&&n[o.memory.containerId]++;const i=t.find((e=>(n[e.id]||0)<1));return(null==i?void 0:i.id)||null}function f(t){var n;if(t.spawning){return void(Game.creeps[t.spawning.name]&&t.room.visual.text(`🛠️ ${t.spawning.name} (${t.spawning.remainingTime})`,t.pos.x+1,t.pos.y,{align:"left",opacity:.8,font:"0.7 Arial"}))}const i=t.room;Game.time%3==1&&i.find(FIND_MY_SPAWNS)[0].id===t.id&&function(t){t.memory.spawnQueue||(t.memory.spawnQueue=[]);const n=s(t),i=r(t),a=t.energyCapacityAvailable,l=[...t.memory.spawnQueue];let c=[];const f={[e.Harvester]:"hrv",[e.Builder]:"bld",[e.Upgrader]:"upg",[e.Miner]:"mnr",[e.Hauler]:"hal"},T=Object.values(e).reduce(((e,o)=>(e[o]=0,e)),{});for(const e of l){const o=e.role,r=i[o]||0,a=n[o]||0;r+T[o]+1<=a?(c.push(e),T[o]++):Game.time%25==1&&console.log(`[${t.name}] Pruning ${e.role} ${e.name} from spawn queue (demand met).`)}const g=[e.Miner,e.Hauler,e.Harvester,e.Builder,e.Upgrader];for(const r of g){const s=i[r]||0;let l=(n[r]||0)-s-(T[r]||0);if(l>0){r!==e.Builder&&r!==e.Upgrader||d(t)||(Game.time%20==4&&l>0&&console.log(`[${t.name}] 🚫 Postponing new ${r}(s) (${l}), economy not stable enough.`),l=0);for(let n=0;n<l;n++){if(c.length>=10){console.log(`[${t.name}] Spawn queue reached limit (10). Halting further additions this tick.`);break}const i=R(r,a);if(0===i.length){Game.time%20==5&&console.log(`[${t.name}] ⚠️ Cannot determine body for new ${r} (capacity ${a}).`);continue}const s=m(i),l=u(i);let d=0,g="";do{g=`${f[r]||r[0]}${l}_${Game.time%1e3+n+d}`,d++}while((Game.creeps[g]||c.some((e=>e.name===g)))&&d<10);if(Game.creeps[g]||c.some((e=>e.name===g))){console.log(`[${t.name}] Failed to generate unique name for ${r} after ${d} attempts. Skipping.`);continue}const S={role:r};if(r===e.Miner||r===e.Harvester){const n=y(t,r,r===e.Miner?1:o(t)<2.5?2:1,c);if(n)S.sourceId=n;else if(r===e.Miner){Game.time%5==2&&console.log(`[${t.name}] No source slot for new Miner request. Not queuing.`);continue}}else if(r===e.Hauler){const e=E(t,c);e&&(S.containerId=e)}const p={role:r,body:i,name:g,memory:S,timestamp:Game.time,cost:s};c.push(p),T[r]++}}if(c.length>=10)break}JSON.stringify(t.memory.spawnQueue)!==JSON.stringify(c)&&(t.memory.spawnQueue=c,Game.time%10==7&&console.log(`[${t.name}] ♻ Spawn Queue updated (${l.length} -> ${c.length}): ${c.map((e=>e.role[0])).join("")||"empty"}`))}(i);const a=i.memory.spawnQueue;if(!a||0===a.length)return;const l=a[0];if(i.energyAvailable<l.cost)return void(Game.time%15==2&&t.id===(null===(n=i.find(FIND_MY_SPAWNS)[0])||void 0===n?void 0:n.id)&&console.log(`[${i.name}/${t.name}] ⏳ Waiting for energy (${i.energyAvailable}/${l.cost}) for ${l.role} ${l.name}`));const c=t.spawnCreep(l.body,l.name,{memory:l.memory});c===OK?(console.log(`[${i.name}/${t.name}] ✅ Spawning ${l.role}: ${l.name} (cost: ${l.cost})`),a.shift()):c!==ERR_BUSY&&c!==ERR_NOT_ENOUGH_ENERGY&&(console.log(`[${i.name}/${t.name}] ❌ Failed to spawn ${l.name} (role ${l.role}) with error: ${c}. Body: ${JSON.stringify(l.body)}, Memory: ${JSON.stringify(l.memory)}`),c!==ERR_INVALID_ARGS&&c!==ERR_NAME_EXISTS||(console.log(`[${i.name}/${t.name}] Removing problematic spawn request: ${l.name}`),a.shift()))}const T=[[0,-2],[1,-1],[2,0],[1,1],[0,2],[-1,1],[-2,0],[-1,-1]];function g(e){if(Game.time%10!=0)return;switch(o(e)){case 2:S(e),function(e){const o=e.find(FIND_MY_SPAWNS)[0];if(!o)return;e.memory.containerPositions||(e.memory.containerPositions={});for(const r of e.find(FIND_SOURCES)){const t=e.memory.containerPositions[r.id];if(t){const o=e.lookForAt(LOOK_STRUCTURES,t.x,t.y).some((e=>e.structureType===STRUCTURE_CONTAINER)),n=e.lookForAt(LOOK_CONSTRUCTION_SITES,t.x,t.y).some((e=>e.structureType===STRUCTURE_CONTAINER));if(o||n)continue;delete e.memory.containerPositions[r.id],console.log(`⚠️ Container for source ${r.id} missing, memory cleared`)}console.log("no memory of this source having a container",r);const n=p.map((([o,t])=>new RoomPosition(r.pos.x+o,r.pos.y+t,e.name))).filter((o=>e.getTerrain().get(o.x,o.y)!==TERRAIN_MASK_WALL&&(!(o.lookFor(LOOK_STRUCTURES).length>0)&&!(o.lookFor(LOOK_CONSTRUCTION_SITES).length>0))));if(0===n.length)continue;n.sort(((e,r)=>o.pos.getRangeTo(e)-o.pos.getRangeTo(r)));const i=n[0],a=e.createConstructionSite(i.x,i.y,STRUCTURE_CONTAINER);a===OK?(e.memory.containerPositions[r.id]={x:i.x,y:i.y},console.log(`✏️ Placed container for source ${r.id} at (${i.x},${i.y})`)):console.log(`❌ Failed to place container at (${i.x},${i.y}): ${a}`)}}(e);break;case 2.5:!function(e){var o;const r=e.find(FIND_MY_SPAWNS)[0],t=e.controller;if(!r||!t)return;if(!e.memory.roadSitesPlanned){const a=[];function s(e){for(const o of e)o.x,o.y,a.find((e=>e.x===o.x&&e.y===o.y))||a.push({x:o.x,y:o.y})}const l=e.find(FIND_SOURCES);for(const c of l){const m=null===(o=e.memory.containerPositions)||void 0===o?void 0:o[c.id];if(!m)continue;const R=new RoomPosition(m.x,m.y,e.name);s(PathFinder.search(R,{pos:r.pos,range:1},{plainCost:2,swampCost:10,roomCallback:e=>{const o=Game.rooms[e];if(!o)return!1;const r=new PathFinder.CostMatrix;return o.find(FIND_STRUCTURES).forEach((e=>{e.structureType===STRUCTURE_ROAD&&r.set(e.pos.x,e.pos.y,1)})),r}}).path)}s(PathFinder.search(r.pos,{pos:t.pos,range:3},{plainCost:2,swampCost:10}).path),e.memory.roadSitesPlanned=a}const n=e.memory.roadSitesPlanned;let i=0;for(const{x:u,y:d}of n){if(i>=5)break;const y=new RoomPosition(u,d,e.name);y.lookFor(LOOK_STRUCTURES).some((e=>e.structureType===STRUCTURE_ROAD))||y.lookFor(LOOK_CONSTRUCTION_SITES).some((e=>e.structureType===STRUCTURE_ROAD))||e.createConstructionSite(u,d,STRUCTURE_ROAD)===OK&&i++}}(e);break;case 3:S(e)}}function S(e){const o=e.controller;if(!o||!o.my||o.level<2)return;const r=CONTROLLER_STRUCTURES.extension[o.level]-(e.find(FIND_MY_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length+e.find(FIND_MY_CONSTRUCTION_SITES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length);if(r<=0)return;const t=e.find(FIND_MY_SPAWNS)[0];if(!t)return;let n=0;for(const[o,i]of T){if(n>=r)return;const a=t.pos.x+o,s=t.pos.y+i;if(!(e.lookForAt(LOOK_STRUCTURES,a,s).length>0||e.lookForAt(LOOK_CONSTRUCTION_SITES,a,s).length>0)){e.createConstructionSite(a,s,STRUCTURE_EXTENSION)===OK&&n++}}}const p=[[-1,-1],[0,-1],[1,-1],[-1,0],[1,0],[-1,1],[0,1],[1,1]];class O{collectEnergy(e){const o=e.pos.findClosestByPath(FIND_DROPPED_RESOURCES,{filter:e=>e.resourceType===RESOURCE_ENERGY&&e.amount>50});if(o)return void(e.pickup(o)===ERR_NOT_IN_RANGE&&e.moveTo(o,{visualizePathStyle:{stroke:"#ffaa00"}}));const r=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getUsedCapacity(RESOURCE_ENERGY)>0});if(r.length>0){const o=e.pos.findClosestByPath(r);return void(o&&e.withdraw(o,RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(o,{visualizePathStyle:{stroke:"#ffaa00"}}))}const t=e.room.find(FIND_SOURCES_ACTIVE);if(t.length>0){const o=e.pos.findClosestByPath(t);o&&e.harvest(o)===ERR_NOT_IN_RANGE&&e.moveTo(o,{visualizePathStyle:{stroke:"#ffaa00"}})}}updateWorkingState(e){e.memory.atCapacity&&0===e.store[RESOURCE_ENERGY]&&(e.memory.atCapacity=!1,e.say("🔄 harvest")),e.memory.atCapacity||0!==e.store.getFreeCapacity()||(e.memory.atCapacity=!0,e.say("⚡ deliver"))}deliverEnergy(e){const o=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getFreeCapacity(RESOURCE_ENERGY)>0});if(o.length>0){const r=e.pos.findClosestByPath(o);r&&e.transfer(r,RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r,{visualizePathStyle:{stroke:"#ffffff"}})}else e.say("🤷‍♂️ full?")}}function C(e){if(e.store.getFreeCapacity(RESOURCE_ENERGY)>0){const o=e.pos.findClosestByPath(FIND_DROPPED_RESOURCES,{filter:e=>e.resourceType===RESOURCE_ENERGY&&e.amount>50});if(o)return void(e.pickup(o)===ERR_NOT_IN_RANGE&&e.moveTo(o))}const o=e.room.find(FIND_CONSTRUCTION_SITES);if(o.length>0){if(0===e.store.getFreeCapacity(RESOURCE_ENERGY)){const r=e.pos.findClosestByPath(o);return void(r&&e.build(r)===ERR_NOT_IN_RANGE&&e.moveTo(r))}{const o=e.room.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_CONTAINER&&e.store[RESOURCE_ENERGY]>0});if(o.length>0)return void(e.withdraw(o[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(o[0]))}}const t=e.room.controller;if(t&&function(e){const o=s(e),t=r(e);for(const e of i)if(t[e]<(o[e]||0))return!1;return!0}(e.room)){const o=e.room.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_CONTAINER&&e.store[RESOURCE_ENERGY]>0}),r=200;if(o.reduce(((e,o)=>e+o.store[RESOURCE_ENERGY]),0)>=r||e.room.energyAvailable>=r){if(0===e.store.getFreeCapacity(RESOURCE_ENERGY))return void(e.upgradeController(t)===ERR_NOT_IN_RANGE&&e.moveTo(t));if(o.length>0)return void(e.withdraw(o[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(o[0]))}}e.say("🪑 idle")}const _={[STRUCTURE_CONTAINER]:{pct:.8},[STRUCTURE_ROAD]:{pct:.5},[STRUCTURE_EXTENSION]:{pct:.8}};const N={harvester:new class extends O{run(e){this.updateWorkingState(e),e.memory.atCapacity?this.performDelivery(e):this.performHarvest(e)}performHarvest(e){let o=null;if(e.memory.sourceId&&(o=Game.getObjectById(e.memory.sourceId),o||(delete e.memory.sourceId,o=null)),!o){const r=e.room.find(FIND_SOURCES_ACTIVE);r.length>0&&(o=e.pos.findClosestByPath(r),o&&(e.memory.sourceId=o.id,e.say("🔄 New Src")))}if(o){const r=e.harvest(o);r===ERR_NOT_IN_RANGE?e.moveTo(o,{visualizePathStyle:{stroke:"#ffaa00"}}):r===OK||(r===ERR_NOT_ENOUGH_RESOURCES?(delete e.memory.sourceId,e.say("⛏️ Empty")):r===ERR_NO_BODYPART&&e.say("💔 No WORK"))}else e.say("❓ No Src"),C(e)}performDelivery(e){if(super.deliverEnergy(e),e.store.getUsedCapacity(RESOURCE_ENERGY)>0){e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getFreeCapacity(RESOURCE_ENERGY)>0}).length>0||(e.say("🚚 IdleFull"),C(e))}}},builder:new class extends O{run(e){this.updateWorkingState(e),e.memory.atCapacity?this.performWork(e):super.collectEnergy(e)}performWork(e){this.tryPriorityRepair(e)||this.tryBuild(e)||this.tryGeneralRepair(e)||(e.say("👷 Idle"),C(e))}tryPriorityRepair(e){const o=e.room.find(FIND_STRUCTURES,{filter:e=>{if(e.structureType===STRUCTURE_WALL||e.structureType===STRUCTURE_RAMPART)return!1;const o=_[e.structureType];return!!o&&(null!=o.pct&&e.hits<e.hitsMax*o.pct||null!=o.hp&&e.hits<o.hp)}});if(o.length>0){const r=e.pos.findClosestByPath(o);if(r)return e.say("🛠️ Prior"),e.repair(r)===ERR_NOT_IN_RANGE&&e.moveTo(r,{visualizePathStyle:{stroke:"#ff0000"}}),!0}return!1}tryBuild(e){const o=e.room.find(FIND_CONSTRUCTION_SITES);if(o.length>0){const r=e.pos.findClosestByPath(o);if(r)return e.say("🚧 Build"),e.build(r)===ERR_NOT_IN_RANGE&&e.moveTo(r,{visualizePathStyle:{stroke:"#ffffff"}}),!0}return!1}tryGeneralRepair(e){const o=e.room.find(FIND_STRUCTURES,{filter:e=>e.structureType!==STRUCTURE_WALL&&e.structureType!==STRUCTURE_RAMPART&&e.hits<e.hitsMax});if(o.length>0){const r=e.pos.findClosestByPath(o);if(r)return e.say("🔧 Repair"),e.repair(r)===ERR_NOT_IN_RANGE&&e.moveTo(r,{visualizePathStyle:{stroke:"#ffaa00"}}),!0}return!1}},upgrader:new class extends O{run(e){this.updateWorkingState(e),e.memory.atCapacity?this.performUpgrade(e):super.collectEnergy(e)}performUpgrade(e){const o=e.room.controller;if(o&&o.my){const r=e.upgradeController(o);r===ERR_NOT_IN_RANGE?e.moveTo(o,{visualizePathStyle:{stroke:"#4CAF50"},range:3}):r===OK||(r===ERR_NOT_ENOUGH_RESOURCES?(e.memory.atCapacity=!1,e.say("⛏️ Empty!")):e.say(`⚠️ UpgErr ${r}`))}else e.say("❓ No Ctrlr"),C(e)}},miner:new class extends O{run(e){if(!this.hasValidAssignments(e))return;const{x:o,y:r}=e.room.memory.containerPositions[e.memory.sourceId],t=new RoomPosition(o,r,e.room.name);e.pos.isEqualTo(t)?this.performHarvesting(e):this.moveToDesignatedPosition(e,t)}hasValidAssignments(e){const o=e.memory.sourceId;if(!o)return e.say("❓NoSrcID"),console.log(`Miner ${e.name} is missing sourceId.`),!1;const r=e.room.memory.containerPositions;return!(!r||!r[o])||(e.say("❌NoSpot"),console.log(`Miner ${e.name} (source: ${o}) is missing a designated containerPosition in room memory.`),!1)}moveToDesignatedPosition(e,o){e.moveTo(o,{visualizePathStyle:{stroke:"#ffaa00"},range:0})}performHarvesting(e){const o=Game.getObjectById(e.memory.sourceId);if(!o)return e.say("❓SrcGone"),console.log(`Miner ${e.name} assigned source ${e.memory.sourceId} no longer exists or is not visible.`),void delete e.memory.sourceId;const r=e.harvest(o);r===OK||(r===ERR_NOT_ENOUGH_RESOURCES?e.say("⛏️Empty"):r===ERR_BUSY||(r===ERR_NO_BODYPART?(e.say("💔NoWORK"),console.log(`Miner ${e.name} has no WORK parts.`)):r===ERR_NOT_OWNER?e.say("🏢NotMyCtrlr"):r===ERR_INVALID_TARGET?(e.say("❌InvTrg"),console.log(`Miner ${e.name} has invalid harvest target: ${o}`),delete e.memory.sourceId):(e.say(`💀HrvFail:${r}`),console.log(`Miner ${e.name} failed to harvest source ${o.id} with error: ${r}`))))}},hauler:new class extends O{run(e){if(this.updateWorkingState(e),e.memory.atCapacity){const o=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getFreeCapacity(RESOURCE_ENERGY)>0});if(o.length>0)return void(e.transfer(o[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(o[0]))}const o=e.memory.containerId,r=o?Game.getObjectById(o):null;r&&r.store.getUsedCapacity(RESOURCE_ENERGY)>0?e.withdraw(r,RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r):C(e)}}},U=function(e,o){const r=Game.cpu.getUsed(),t=o(),n=Game.cpu.getUsed()-r;return console.log(`📊 ${e}: ${n.toFixed(2)} CPU`),t}("main loop",(function(){!function(){for(const e in Memory.creeps)e in Game.creeps||(delete Memory.creeps[e],console.log(`🧹 Cleaned up memory for dead creep: ${e}`))}();const e=Object.values(Game.spawns)[0];e&&f(e);for(const e in Game.rooms){const o=Game.rooms[e];g(o),Game.time%10==0&&n(o)}for(const e in Game.creeps){const o=Game.creeps[e];if(!o.spawning){const e=o.memory.role;e&&N[e]?N[e].run(o):console.log(`Creep ${o.name} has an unknown or undefined role: ${e}`)}}}));exports.loop=U;
