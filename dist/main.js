"use strict";function e(e){const r=e.find(FIND_CONSTRUCTION_SITES).length;return{harvester:2,builder:r>0?1:0,upgrader:r>0?0:1}}Object.defineProperty(exports,"__esModule",{value:!0});const r={harvester:[WORK,CARRY,MOVE,WORK,WORK],upgrader:[WORK,CARRY,MOVE,WORK,CARRY],builder:[WORK,CARRY,MOVE,CARRY,MOVE]},o={work:100,carry:50,move:50},t=[WORK,CARRY,MOVE];function n(e,n){const s=r[e];if(!s)return t;const l=s.reduce(((e,r)=>e+o[r]),0);if(n<200)return t;if(n>=2*l){const e=Math.floor(n/l);return Array(e).fill(s).flat().slice(0,50)}const i=Math.min(Math.floor(n/50),50),c=[];let m=n;for(;c.length<i;){let e=!1;for(const r of s)if(!(m<o[r])&&(c.push(r),m-=o[r],e=!0,c.length>=i))break;if(!e)break}return c}const s=[[0,-2],[1,-1],[2,0],[1,1],[0,2],[-1,1],[-2,0],[-1,-1]];function l(e){const r=e.controller;if(!r||!r.my||r.level<2)return;const o=CONTROLLER_STRUCTURES.extension[r.level]-(e.find(FIND_MY_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length+e.find(FIND_MY_CONSTRUCTION_SITES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length);if(o<=0)return;const t=e.find(FIND_MY_SPAWNS)[0];if(!t)return;let n=0;for(const[r,l]of s){if(n>=o)return;const s=t.pos.x+r,i=t.pos.y+l;if(!(e.lookForAt(LOOK_STRUCTURES,s,i).length>0||e.lookForAt(LOOK_CONSTRUCTION_SITES,s,i).length>0)){e.createConstructionSite(s,i,STRUCTURE_EXTENSION)===OK&&n++}}}class i{collectEnergy(e){if(Object.values(Game.creeps).some((e=>"harvester"===e.memory.role))){const r=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getUsedCapacity(RESOURCE_ENERGY)>0});if(r.length>0)return void(e.withdraw(r[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r[0]))}const r=e.room.find(FIND_SOURCES);r.length>0&&e.harvest(r[0])===ERR_NOT_IN_RANGE&&e.moveTo(r[0])}updateWorkingState(e){e.memory.working&&0===e.store[RESOURCE_ENERGY]&&(e.memory.working=!1),e.memory.working||0!==e.store.getFreeCapacity()||(e.memory.working=!0)}}function c(e,r){const o=n(r,e.room.energyCapacityAvailable),t=e.body.map((e=>e.type)),s=new Set(o);for(const e of s)if(!t.includes(e))return!1;return!0}const m={upgrader:new class extends i{run(e){this.updateWorkingState(e),e.memory.working?e.upgradeController(e.room.controller)===ERR_NOT_IN_RANGE&&e.moveTo(e.room.controller):this.collectEnergy(e)}},builder:new class extends i{run(e){this.updateWorkingState(e),e.memory.working?this.build(e):this.collectEnergy(e)}build(e){const r=e.room.find(FIND_CONSTRUCTION_SITES);if(0===r.length){const r=e.room.find(FIND_MY_SPAWNS)[0];return void(r&&e.moveTo(r))}const o=e.pos.findClosestByRange(r);o&&e.build(o)===ERR_NOT_IN_RANGE&&e.moveTo(o)}},harvester:new class extends i{run(e){this.updateWorkingState(e),e.memory.working?this.deliverEnergy(e):this.harvest(e)}deliverEnergy(e){const r=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getFreeCapacity(RESOURCE_ENERGY)>0});r.length>0&&e.transfer(r[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r[0])}harvest(e){const r=e.room.find(FIND_SOURCES);r.length>0&&e.harvest(r[0])===ERR_NOT_IN_RANGE&&e.moveTo(r[0])}}};exports.loop=function(){var r;!function(){for(const e in Memory.creeps)e in Game.creeps||(delete Memory.creeps[e],console.log(`🧹 Cleaned up memory for dead creep: ${e}`))}(),function(){if(Game.time%10==0)for(const r of Object.values(Game.rooms)){const o=e(r);for(const e of Object.keys(o)){const r=o[e],t=Object.values(Game.creeps).filter((r=>r.memory.role!==e&&(!r.memory.lockUntil||Game.time>=r.memory.lockUntil)&&c(r,e))),n={harvester:0,upgrader:0,builder:0};for(const e of Object.values(Game.creeps))n[e.memory.role]=(n[e.memory.role]||0)+1;if(n[e]>=r)continue;const s=t.find((e=>n[e.memory.role]>o[e.memory.role]));if(s){console.log(`🔁 ${s.name}: ${s.memory.role} → ${e}`),s.memory.role=e,s.memory.lockUntil=Game.time+100;break}}}}();const o=Object.values(Game.spawns)[0];o&&function(r){const o=e(r.room);if(console.log("demand:",JSON.stringify(o)),0===Object.values(Game.creeps).filter((e=>"harvester"===e.memory.role)).length&&r.store[RESOURCE_ENERGY]>=200){const e=`emergency_harvester_${Game.time}`;if(r.spawnCreep([WORK,CARRY,MOVE],e,{memory:{role:"harvester"}})===OK)return void console.log(`🆘 Emergency harvester spawned: ${e}`)}for(const e of Object.keys(o)){const t=o[e];if(Object.values(Game.creeps).filter((r=>r.memory.role===e)).length<t){const o=r.room.energyAvailable,t=n(e,o),s=`${e}_${Game.time}`;if(r.spawnCreep(t,s,{memory:{role:e}})===OK){console.log(`Spawning ${e}: ${s}`);break}}}}(o);for(const e of Object.values(Game.rooms))l(e);for(const e in Game.creeps){const o=Game.creeps[e],t=o.memory.role;null===(r=m[t])||void 0===r||r.run(o)}};
