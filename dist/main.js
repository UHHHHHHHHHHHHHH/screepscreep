"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e={harvester:2,upgrader:1,builder:1},o={harvester:[WORK,CARRY,MOVE,MOVE],upgrader:[WORK,CARRY,MOVE,MOVE],builder:[WORK,CARRY,MOVE,MOVE]};function r(e){const o=e.controller;if(!o||!o.my||o.level<2)return;const r=CONTROLLER_STRUCTURES.extension[o.level]-(e.find(FIND_MY_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length+e.find(FIND_MY_CONSTRUCTION_SITES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length);if(r<=0)return;const t=e.find(FIND_MY_SPAWNS)[0];if(!t)return;let n=0;for(let o=-3;o<=3;o++)for(let s=-3;s<=3;s++){if(n>=r)return;const i=t.pos.x+o,R=t.pos.y+s;e.lookForAt(LOOK_STRUCTURES,i,R).length>0||(e.lookForAt(LOOK_CONSTRUCTION_SITES,i,R).length>0||e.createConstructionSite(i,R,STRUCTURE_EXTENSION)===OK&&n++)}}class t{collectEnergy(e){const o=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getUsedCapacity(RESOURCE_ENERGY)>0});if(o.length>0)return void(e.withdraw(o[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(o[0]));const r=e.room.find(FIND_SOURCES);r.length>0&&e.harvest(r[0])===ERR_NOT_IN_RANGE&&e.moveTo(r[0])}updateWorkingState(e){e.memory.working&&0===e.store[RESOURCE_ENERGY]&&(e.memory.working=!1),e.memory.working||0!==e.store.getFreeCapacity()||(e.memory.working=!0)}}const n={upgrader:new class extends t{run(e){this.updateWorkingState(e),e.memory.working?e.upgradeController(e.room.controller)===ERR_NOT_IN_RANGE&&e.moveTo(e.room.controller):this.collectEnergy(e)}},builder:new class extends t{run(e){this.updateWorkingState(e),e.memory.working?this.build(e):this.collectEnergy(e)}build(e){const o=e.room.find(FIND_CONSTRUCTION_SITES);if(0===o.length){const o=e.room.find(FIND_MY_SPAWNS)[0];return void(o&&e.moveTo(o))}const r=e.pos.findClosestByRange(o);r&&e.build(r)===ERR_NOT_IN_RANGE&&e.moveTo(r)}},harvester:new class extends t{run(e){this.updateWorkingState(e),e.memory.working?this.deliverEnergy(e):this.harvest(e)}deliverEnergy(e){const o=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getFreeCapacity(RESOURCE_ENERGY)>0});o.length>0&&e.transfer(o[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(o[0])}harvest(e){const o=e.room.find(FIND_SOURCES);o.length>0&&e.harvest(o[0])===ERR_NOT_IN_RANGE&&e.moveTo(o[0])}}};exports.loop=function(){var t;const s=Game.cpu.getUsed();!function(){for(const e in Memory.creeps)e in Game.creeps||(delete Memory.creeps[e],console.log(`🧹 Cleaned up memory for dead creep: ${e}`))}();const i=Object.values(Game.spawns)[0];i&&function(r){for(const t in e){const n=t;if(Object.values(Game.creeps).filter((e=>e.memory.role===n)).length<e[n]){const e=`${n}_${Game.time}`;if(r.spawnCreep(o[n],e,{memory:{role:n}})===OK){console.log(`Spawning ${n}: ${e}`);break}}}}(i);for(const e of Object.values(Game.rooms))r(e);for(const e in Game.creeps){const o=Game.creeps[e],r=o.memory.role;null===(t=n[r])||void 0===t||t.run(o)}const R=Game.cpu.getUsed();console.log(`⏱️ Tick CPU: ${(R-s).toFixed(2)}`)};
