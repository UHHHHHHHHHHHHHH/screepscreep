"use strict";var e;function r(e){var r,o;if((null!==(o=null===(r=e.controller)||void 0===r?void 0:r.level)&&void 0!==o?o:0)<2)return 1;const t=e.find(FIND_SOURCES).length,n=e.find(FIND_MY_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length,s=e.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_CONTAINER}).length;return n<5||s<t?2:2.5}Object.defineProperty(exports,"__esModule",{value:!0}),function(e){e.Harvester="harvester",e.Upgrader="upgrader",e.Builder="builder",e.Miner="miner",e.Hauler="hauler"}(e||(e={}));const o=Object.values(e);function t(t){const n=r(t),s=t.find(FIND_CONSTRUCTION_SITES).length,i=t.find(FIND_SOURCES),c=2*i.length,l=Object.values(Game.creeps).filter((r=>r.memory.role===e.Harvester&&r.room.name===t.name)).length,a=o.reduce(((e,r)=>(e[r]=0,e)),{});switch(n){case 1:return Object.assign(Object.assign({},a),{harvester:c,upgrader:l>=c?1:0});case 2:const e=t.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_CONTAINER});return Object.assign(Object.assign({},a),{harvester:c,builder:l>=c&&s>0?1:0,hauler:e.length>=1?1:0});case 2.5:return Object.assign(Object.assign({},a),{miner:i.length,hauler:i.length,builder:s>0?1:0,upgrader:1});default:return Object.assign(Object.assign({},a),{harvester:c,builder:s>0?1:0,upgrader:s>0?0:1})}}const n={harvester:{work:3,carry:1,move:1},builder:{work:1,carry:2,move:2},upgrader:{work:2,carry:2,move:1},miner:{work:5,move:1},hauler:{carry:6,move:3}};const s=[WORK,CARRY,CARRY,MOVE,MOVE];function i(e,r){const o=n[e];if(!o)return s;const t=function(e,r,o={work:100,carry:50,move:50}){const t=[],n=[];for(const r in e){const o=e[r];for(let e=0;e<o;e++)n.push(r)}const s=n.reduce(((e,r)=>e+o[r]),0),i=Math.floor(r/s),c=Math.min(i*n.length,50);for(let e=0;e<c;e++)t.push(n[e%n.length]);return t}(o,r);return t.length>0?t:s}function c(e){const r={work:0,carry:0,move:0,attack:0,ranged_attack:0,tough:0,heal:0,claim:0};for(const o of e)r[o]++;return Object.entries(r).filter((([e,r])=>r>0)).map((([e,r])=>`${r}${e[0]}`)).join("")}function l(e,r,o=2){const t=e.find(FIND_SOURCES),n={};for(const e of t)n[e.id]=0;for(const e of Object.values(Game.creeps))e.memory.role===r&&e.memory.sourceId&&(n[e.memory.sourceId]=(n[e.memory.sourceId]||0)+1);const s=t.find((e=>n[e.id]<o));return(null==s?void 0:s.id)||null}function a(e){const r=e.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_CONTAINER}),o={};for(const e of r)o[e.id]=0;for(const e of Object.values(Game.creeps))"hauler"===e.memory.role&&e.memory.containerId&&(o[e.memory.containerId]=(o[e.memory.containerId]||0)+1);const t=r.find((e=>o[e.id]<1));return(null==t?void 0:t.id)||null}const R=[[0,-2],[1,-1],[2,0],[1,1],[0,2],[-1,1],[-2,0],[-1,-1]];function u(e){if(Game.time%10!=0)return;if(2===r(e))!function(e){const r=e.controller;if(!r||!r.my||r.level<2)return;const o=CONTROLLER_STRUCTURES.extension[r.level],t=e.find(FIND_MY_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length,n=e.find(FIND_MY_CONSTRUCTION_SITES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length,s=o-(t+n);if(s<=0)return;const i=e.find(FIND_MY_SPAWNS)[0];if(!i)return;let c=0;for(const[r,o]of R){if(c>=s)return;const t=i.pos.x+r,n=i.pos.y+o;if(!(e.lookForAt(LOOK_STRUCTURES,t,n).length>0||e.lookForAt(LOOK_CONSTRUCTION_SITES,t,n).length>0)){e.createConstructionSite(t,n,STRUCTURE_EXTENSION)===OK&&c++}}}(e),function(e){const r=e.find(FIND_MY_SPAWNS)[0];if(!r)return;e.memory.containerPositions||(e.memory.containerPositions={});for(const o of e.find(FIND_SOURCES)){if(e.memory.containerPositions[o.id])continue;const t=m.map((([r,t])=>new RoomPosition(o.pos.x+r,o.pos.y+t,e.name))).filter((r=>e.getTerrain().get(r.x,r.y)!==TERRAIN_MASK_WALL&&(!(r.lookFor(LOOK_STRUCTURES).length>0)&&!(r.lookFor(LOOK_CONSTRUCTION_SITES).length>0))));if(0===t.length)continue;t.sort(((e,o)=>r.pos.getRangeTo(e)-r.pos.getRangeTo(o)));const n=t[0],s=e.createConstructionSite(n.x,n.y,STRUCTURE_CONTAINER);s===OK?(e.memory.containerPositions[o.id]={x:n.x,y:n.y},console.log(`✏️ Placed container for source ${o.id} at (${n.x},${n.y})`)):console.log(`❌ Failed to place container at (${n.x},${n.y}): ${s}`)}}(e)}const m=[[-1,-1],[0,-1],[1,-1],[-1,0],[1,0],[-1,1],[0,1],[1,1]];class E{collectEnergy(e){if(Object.values(Game.creeps).some((e=>"harvester"===e.memory.role))){const r=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getUsedCapacity(RESOURCE_ENERGY)>0});if(r.length>0)return void(e.withdraw(r[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r[0]))}const r=e.room.find(FIND_SOURCES);r.length>0&&e.harvest(r[0])===ERR_NOT_IN_RANGE&&e.moveTo(r[0])}updateWorkingState(e){e.memory.working&&0===e.store[RESOURCE_ENERGY]&&(e.memory.working=!1),e.memory.working||0!==e.store.getFreeCapacity()||(e.memory.working=!0)}}function f(e,r){const o=i(r,e.room.energyCapacityAvailable),t=e.body.map((e=>e.type)),n=new Set(o);for(const e of n)if(!t.includes(e))return!1;return!0}function T(e){const r=e.room.find(FIND_CONSTRUCTION_SITES);if(r.length>0){if(0===e.store.getFreeCapacity(RESOURCE_ENERGY)){const o=e.pos.findClosestByPath(r);return void(o&&e.build(o)===ERR_NOT_IN_RANGE&&e.moveTo(o))}{const r=e.room.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_CONTAINER&&e.store[RESOURCE_ENERGY]>0});if(r.length>0)return void(e.withdraw(r[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r[0]))}}const o=e.room.controller;if(o&&function(e){const r=t(e),o={harvester:0,upgrader:0,builder:0,miner:0,hauler:0};for(const r of Object.values(Game.creeps))r.room.name===e.name&&(o[r.memory.role]=(o[r.memory.role]||0)+1);for(const e of Object.keys(r))if(o[e]<r[e])return!1;return!0}(e.room)){const r=e.room.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_CONTAINER&&e.store[RESOURCE_ENERGY]>0}),t=200;if(r.reduce(((e,r)=>e+r.store[RESOURCE_ENERGY]),0)>=t||e.room.energyAvailable>=t){if(0===e.store.getFreeCapacity(RESOURCE_ENERGY))return void(e.upgradeController(o)===ERR_NOT_IN_RANGE&&e.moveTo(o));if(r.length>0)return void(e.withdraw(r[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r[0]))}}e.say("🪑 idle")}const d={harvester:new class extends E{run(e){this.updateWorkingState(e),e.memory.working?this.deliverEnergy(e):this.harvest(e)}deliverEnergy(e){const r=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getFreeCapacity(RESOURCE_ENERGY)>0});r.length>0&&e.transfer(r[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r[0])}harvest(e){const r=e.memory.sourceId;let o=r?Game.getObjectById(r):null;if(!o){if(o=e.pos.findClosestByPath(FIND_SOURCES),!o)return void e.say("❓ no src");e.memory.sourceId=o.id,e.say("🔁")}e.harvest(o)===ERR_NOT_IN_RANGE&&e.moveTo(o)}},builder:new class extends E{run(e){this.updateWorkingState(e),e.memory.working?this.buildOrRepair(e):this.collectEnergy(e)}buildOrRepair(e){const r={[STRUCTURE_CONTAINER]:{pct:.8},[STRUCTURE_ROAD]:{hp:5e3},[STRUCTURE_EXTENSION]:{pct:.8}},o=e.room.find(FIND_STRUCTURES,{filter:e=>{if(e.structureType===STRUCTURE_WALL||e.structureType===STRUCTURE_RAMPART)return!1;const o=r[e.structureType];if(!o)return!1;const t=e.hitsMax-e.hits;return null!=o.pct&&e.hits<e.hitsMax*o.pct||null!=o.hp&&t>o.hp}});if(o.length>0){const r=e.pos.findClosestByRange(o);return void(r&&e.repair(r)===ERR_NOT_IN_RANGE&&e.moveTo(r,{visualizePathStyle:{stroke:"#ff0000"}}))}const t=e.room.find(FIND_CONSTRUCTION_SITES);if(0===t.length){const r=e.room.find(FIND_MY_SPAWNS)[0];return void(r&&e.moveTo(r))}const n=e.pos.findClosestByRange(t);n&&e.build(n)===ERR_NOT_IN_RANGE&&e.moveTo(n,{visualizePathStyle:{stroke:"#ffffff"}})}},upgrader:new class extends E{run(e){this.updateWorkingState(e),e.memory.working?e.upgradeController(e.room.controller)===ERR_NOT_IN_RANGE&&e.moveTo(e.room.controller):this.collectEnergy(e)}},miner:new class extends E{run(e){const r=e.memory.sourceId,o=r?Game.getObjectById(r):null;if(!o)return void e.say("❓ no src");const t=e.room.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_CONTAINER&&e.pos.isNearTo(o.pos)})[0];if(!t)return void e.say("❌ no box");if(!e.pos.isEqualTo(t.pos))return void e.moveTo(t,{visualizePathStyle:{stroke:"#ffaa00"}});e.harvest(o)!==OK&&e.say("💀 fail")}},hauler:new class extends E{run(e){if(this.updateWorkingState(e),e.memory.working){const r=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getFreeCapacity(RESOURCE_ENERGY)>0});if(r.length>0)return void(e.transfer(r[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r[0]))}const r=e.memory.containerId?Game.getObjectById(e.memory.containerId):null;r&&r.store[RESOURCE_ENERGY]>0?e.withdraw(r,RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r):T(e)}}};exports.loop=function(){var o;!function(){for(const e in Memory.creeps)e in Game.creeps||(delete Memory.creeps[e],console.log(`🧹 Cleaned up memory for dead creep: ${e}`))}(),function(){if(Game.time%10==0)for(const e of Object.values(Game.rooms)){const r=t(e);for(const e of Object.keys(r)){const o=r[e],t=Object.values(Game.creeps).filter((r=>r.memory.role!==e&&(!r.memory.lockUntil||Game.time>=r.memory.lockUntil)&&f(r,e))),n={harvester:0,upgrader:0,builder:0,miner:0,hauler:0};for(const e of Object.values(Game.creeps))n[e.memory.role]=(n[e.memory.role]||0)+1;if(n[e]>=o)continue;const s=t.find((e=>{var o;const t=n[e.memory.role],s=null!==(o=r[e.memory.role])&&void 0!==o?o:0;return 0===s||t>s}));if(s){console.log(`🔁 ${s.name}: ${s.memory.role} → ${e}`),s.memory.role=e,s.memory.lockUntil=Game.time+100;break}console.log(`⚠️ No reassignable creeps found for role '${e}'`),console.log(`  Needed: ${o}, Current: ${n[e]}`),console.log("  Candidates:",t.map((e=>`${e.name} (${e.memory.role})`)))}}}();const n=Object.values(Game.spawns)[0];n&&function(o){const n=o.room,s=t(n),R=Object.values(Game.creeps).filter((r=>r.memory.role===e.Harvester)).length;if(1===r(n)&&0===R&&o.store[RESOURCE_ENERGY]>=200){const r=`emergency_harvester_${Game.time}`;if(o.spawnCreep([WORK,CARRY,MOVE],r,{memory:{role:e.Harvester}})===OK)return void console.log(`🆘 Emergency harvester spawned: ${r}`)}for(const r of Object.keys(s)){const t=s[r];if(Object.values(Game.creeps).filter((e=>e.memory.role===r)).length<t){const t=o.room.energyAvailable,n=i(r,t),s={harvester:"hr",builder:"b",upgrader:"u",miner:"m",hauler:"hl"},R=c(n),u=`${s[r]||r}_${R}_${Game.time}`;let m;if(r===e.Harvester||r===e.Miner){const t=r===e.Miner?1:2,s=l(o.room,r,t);if(!s){console.log("❌ No available source for role"+r);continue}m=o.spawnCreep(n,u,{memory:{role:r,sourceId:s}}),m===OK&&console.log(`Spawning harvester: ${u} → source ${s}`)}else if(r===e.Hauler){const e=a(o.room);if(!e){console.log("❌ No available container for hauler");continue}m=o.spawnCreep(n,u,{memory:{role:r,containerId:e}}),m===OK&&console.log(`Spawning hauler: ${u} → container ${e}`)}else m=o.spawnCreep(n,u,{memory:{role:r}}),m===OK&&console.log(`Spawning ${r}: ${u}`);if(m===OK)break}}}(n);for(const e of Object.values(Game.rooms))u(e);for(const e in Game.creeps){const r=Game.creeps[e],t=r.memory.role;null===(o=d[t])||void 0===o||o.run(r)}};
