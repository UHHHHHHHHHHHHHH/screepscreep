"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e={harvester:2,upgrader:1},r={harvester:[WORK,CARRY,MOVE,MOVE],upgrader:[WORK,CARRY,MOVE,MOVE]};const o={harvester:{run(e){if(e.store.getFreeCapacity()>0){const r=e.room.find(FIND_SOURCES);e.harvest(r[0])===ERR_NOT_IN_RANGE&&e.moveTo(r[0])}else{const r=e.room.find(FIND_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_SPAWN&&e.store.getFreeCapacity(RESOURCE_ENERGY)>0});r.length>0&&e.transfer(r[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r[0])}}},upgrader:{run(e){if(0===e.store[RESOURCE_ENERGY]){const r=e.room.find(FIND_SOURCES);e.harvest(r[0])===ERR_NOT_IN_RANGE&&e.moveTo(r[0])}else e.upgradeController(e.room.controller)===ERR_NOT_IN_RANGE&&e.moveTo(e.room.controller)}}};exports.loop=function(){var t;const s=Object.values(Game.spawns)[0];s&&function(o){for(const t in e){const s=t;if(Object.values(Game.creeps).filter((e=>e.memory.role===s)).length<e[s]){const e=`${s}_${Game.time}`;if(o.spawnCreep(r[s],e,{memory:{role:s}})===OK){console.log(`Spawning ${s}: ${e}`);break}}}}(s);for(const e in Game.creeps){const r=Game.creeps[e],s=r.memory.role;null===(t=o[s])||void 0===t||t.run(r)}};
