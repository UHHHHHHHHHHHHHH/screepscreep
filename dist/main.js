"use strict";function e(e){const r=function(e){var r,o;const t=null!==(o=null===(r=e.controller)||void 0===r?void 0:r.level)&&void 0!==o?o:0;return t<2?1:2===t?2:3===t?3:4}(e),o=e.find(FIND_CONSTRUCTION_SITES).length,t=2*e.find(FIND_SOURCES).length,n=Object.values(Game.creeps).filter((r=>"harvester"===r.memory.role&&r.room.name===e.name)).length;switch(r){case 1:return{harvester:t,builder:0,upgrader:n>=t?1:0};case 2:return{harvester:t,builder:n>=t&&o>0?1:0,upgrader:0};default:return{harvester:t,builder:o>0?1:0,upgrader:o>0?0:1}}}Object.defineProperty(exports,"__esModule",{value:!0});const r={harvester:{work:3,carry:1,move:1},builder:{work:1,carry:2,move:2},upgrader:{work:2,carry:2,move:1}};const o=[WORK,CARRY,CARRY,MOVE,MOVE];function t(e,t){const n=r[e];if(!n)return o;const s=function(e,r,o={work:100,carry:50,move:50}){const t=[],n=[];for(const r in e){const o=e[r];for(let e=0;e<o;e++)n.push(r)}const s=n.reduce(((e,r)=>e+o[r]),0),c=Math.floor(r/s),l=Math.min(c*n.length,50);for(let e=0;e<l;e++)t.push(n[e%n.length]);return t}(n,t);return s.length>0?s:o}function n(e){const r={work:0,carry:0,move:0,attack:0,ranged_attack:0,tough:0,heal:0,claim:0};for(const o of e)r[o]++;return Object.entries(r).filter((([e,r])=>r>0)).map((([e,r])=>`${r}${e[0]}`)).join("")}function s(e){const r=e.find(FIND_SOURCES),o={};for(const e of r)o[e.id]=0;for(const e of Object.values(Game.creeps))"harvester"===e.memory.role&&e.memory.sourceId&&(o[e.memory.sourceId]=(o[e.memory.sourceId]||0)+1);const t=r.find((e=>o[e.id]<2));return(null==t?void 0:t.id)||null}const c=[[0,-2],[1,-1],[2,0],[1,1],[0,2],[-1,1],[-2,0],[-1,-1]];function l(e){const r=e.controller;if(!r||!r.my||r.level<2)return;const o=CONTROLLER_STRUCTURES.extension[r.level]-(e.find(FIND_MY_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length+e.find(FIND_MY_CONSTRUCTION_SITES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length);if(o<=0)return;const t=e.find(FIND_MY_SPAWNS)[0];if(!t)return;let n=0;for(const[r,s]of c){if(n>=o)return;const c=t.pos.x+r,l=t.pos.y+s;if(!(e.lookForAt(LOOK_STRUCTURES,c,l).length>0||e.lookForAt(LOOK_CONSTRUCTION_SITES,c,l).length>0)){e.createConstructionSite(c,l,STRUCTURE_EXTENSION)===OK&&n++}}}class i{collectEnergy(e){if(Object.values(Game.creeps).some((e=>"harvester"===e.memory.role))){const r=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getUsedCapacity(RESOURCE_ENERGY)>0});if(r.length>0)return void(e.withdraw(r[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r[0]))}const r=e.room.find(FIND_SOURCES);r.length>0&&e.harvest(r[0])===ERR_NOT_IN_RANGE&&e.moveTo(r[0])}updateWorkingState(e){e.memory.working&&0===e.store[RESOURCE_ENERGY]&&(e.memory.working=!1),e.memory.working||0!==e.store.getFreeCapacity()||(e.memory.working=!0)}}function a(e,r){const o=t(r,e.room.energyCapacityAvailable),n=e.body.map((e=>e.type)),s=new Set(o);for(const e of s)if(!n.includes(e))return!1;return!0}const m={upgrader:new class extends i{run(e){this.updateWorkingState(e),e.memory.working?e.upgradeController(e.room.controller)===ERR_NOT_IN_RANGE&&e.moveTo(e.room.controller):this.collectEnergy(e)}},builder:new class extends i{run(e){this.updateWorkingState(e),e.memory.working?this.build(e):this.collectEnergy(e)}build(e){const r=e.room.find(FIND_CONSTRUCTION_SITES);if(0===r.length){const r=e.room.find(FIND_MY_SPAWNS)[0];return void(r&&e.moveTo(r))}const o=e.pos.findClosestByRange(r);o&&e.build(o)===ERR_NOT_IN_RANGE&&e.moveTo(o)}},harvester:new class extends i{run(e){this.updateWorkingState(e),e.memory.working?this.deliverEnergy(e):this.harvest(e)}deliverEnergy(e){const r=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getFreeCapacity(RESOURCE_ENERGY)>0});r.length>0&&e.transfer(r[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(r[0])}harvest(e){const r=e.memory.sourceId;let o=r?Game.getObjectById(r):null;if(!o){if(o=e.pos.findClosestByPath(FIND_SOURCES),!o)return void e.say("❓ no src");e.memory.sourceId=o.id,e.say("🔁")}e.harvest(o)===ERR_NOT_IN_RANGE&&e.moveTo(o)}}};exports.loop=function(){var r;!function(){for(const e in Memory.creeps)e in Game.creeps||(delete Memory.creeps[e],console.log(`🧹 Cleaned up memory for dead creep: ${e}`))}(),function(){if(Game.time%10==0)for(const r of Object.values(Game.rooms)){const o=e(r);for(const e of Object.keys(o)){const r=o[e],t=Object.values(Game.creeps).filter((r=>r.memory.role!==e&&(!r.memory.lockUntil||Game.time>=r.memory.lockUntil)&&a(r,e))),n={harvester:0,upgrader:0,builder:0};for(const e of Object.values(Game.creeps))n[e.memory.role]=(n[e.memory.role]||0)+1;if(n[e]>=r)continue;const s=t.find((e=>{var r;const t=n[e.memory.role],s=null!==(r=o[e.memory.role])&&void 0!==r?r:0;return 0===s||t>s}));if(s){console.log(`🔁 ${s.name}: ${s.memory.role} → ${e}`),s.memory.role=e,s.memory.lockUntil=Game.time+100;break}console.log(`⚠️ No reassignable creeps found for role '${e}'`),console.log(`  Needed: ${r}, Current: ${n[e]}`),console.log("  Candidates:",t.map((e=>`${e.name} (${e.memory.role})`)))}}}();const o=Object.values(Game.spawns)[0];o&&function(r){const o=e(r.room);if(0===Object.values(Game.creeps).filter((e=>"harvester"===e.memory.role)).length&&r.store[RESOURCE_ENERGY]>=200){const e=`emergency_harvester_${Game.time}`;if(r.spawnCreep([WORK,CARRY,MOVE],e,{memory:{role:"harvester"}})===OK)return void console.log(`🆘 Emergency harvester spawned: ${e}`)}for(const e of Object.keys(o)){const c=o[e];if(Object.values(Game.creeps).filter((r=>r.memory.role===e)).length<c){const o=r.room.energyAvailable,c=t(e,o),l={harvester:"h",builder:"b",upgrader:"u"},i=n(c),a=`${l[e]||e}_${i}_${Game.time}`;let m;if("harvester"===e){const o=s(r.room);if(!o){console.log("❌ No available source for harvester");continue}m=r.spawnCreep(c,a,{memory:{role:e,sourceId:o}}),m===OK&&console.log(`Spawning harvester: ${a} → source ${o}`)}else m=r.spawnCreep(c,a,{memory:{role:e}}),m===OK&&console.log(`Spawning ${e}: ${a}`);if(m===OK)break}}}(o);for(const e of Object.values(Game.rooms))l(e);for(const e in Game.creeps){const o=Game.creeps[e],t=o.memory.role;null===(r=m[t])||void 0===r||r.run(o)}};
