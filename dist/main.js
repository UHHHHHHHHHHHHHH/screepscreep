"use strict";function e(e){const o=e.find(FIND_CONSTRUCTION_SITES).length,r=2*e.find(FIND_SOURCES).length;return Object.values(Game.creeps).filter((o=>"harvester"===o.memory.role&&o.room.name===e.name)).length<r?{harvester:r,builder:0,upgrader:0}:{harvester:r,builder:o>0?1:0,upgrader:o>0?0:1}}Object.defineProperty(exports,"__esModule",{value:!0});const o={harvester:[WORK,CARRY,MOVE,WORK,WORK],upgrader:[WORK,CARRY,MOVE,WORK,CARRY],builder:[WORK,CARRY,MOVE,CARRY,MOVE]},r={work:100,carry:50,move:50},t=[WORK,CARRY,MOVE];function n(e,n){const s=o[e];if(!s)return t;const l=s.reduce(((e,o)=>e+r[o]),0);if(n<200)return t;if(n>=2*l){const e=Math.floor(n/l);return Array(e).fill(s).flat().slice(0,50)}const c=Math.min(Math.floor(n/50),50),i=[];let m=n;for(;i.length<c;){let e=!1;for(const o of s)if(!(m<r[o])&&(i.push(o),m-=r[o],e=!0,i.length>=c))break;if(!e)break}return i}function s(e){const o=e.find(FIND_SOURCES),r={};for(const e of o)r[e.id]=0;for(const e of Object.values(Game.creeps))"harvester"===e.memory.role&&e.memory.sourceId&&(r[e.memory.sourceId]=(r[e.memory.sourceId]||0)+1);const t=o.find((e=>r[e.id]<2));return(null==t?void 0:t.id)||null}const l=[[0,-2],[1,-1],[2,0],[1,1],[0,2],[-1,1],[-2,0],[-1,-1]];function c(e){const o=e.controller;if(!o||!o.my||o.level<2)return;const r=CONTROLLER_STRUCTURES.extension[o.level]-(e.find(FIND_MY_STRUCTURES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length+e.find(FIND_MY_CONSTRUCTION_SITES,{filter:e=>e.structureType===STRUCTURE_EXTENSION}).length);if(r<=0)return;const t=e.find(FIND_MY_SPAWNS)[0];if(!t)return;let n=0;for(const[o,s]of l){if(n>=r)return;const l=t.pos.x+o,c=t.pos.y+s;if(!(e.lookForAt(LOOK_STRUCTURES,l,c).length>0||e.lookForAt(LOOK_CONSTRUCTION_SITES,l,c).length>0)){e.createConstructionSite(l,c,STRUCTURE_EXTENSION)===OK&&n++}}}class i{collectEnergy(e){if(Object.values(Game.creeps).some((e=>"harvester"===e.memory.role))){const o=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getUsedCapacity(RESOURCE_ENERGY)>0});if(o.length>0)return void(e.withdraw(o[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(o[0]))}const o=e.room.find(FIND_SOURCES);o.length>0&&e.harvest(o[0])===ERR_NOT_IN_RANGE&&e.moveTo(o[0])}updateWorkingState(e){e.memory.working&&0===e.store[RESOURCE_ENERGY]&&(e.memory.working=!1),e.memory.working||0!==e.store.getFreeCapacity()||(e.memory.working=!0)}}function m(e,o){const r=n(o,e.room.energyCapacityAvailable),t=e.body.map((e=>e.type)),s=new Set(r);for(const e of s)if(!t.includes(e))return!1;return!0}const a={upgrader:new class extends i{run(e){this.updateWorkingState(e),e.memory.working?e.upgradeController(e.room.controller)===ERR_NOT_IN_RANGE&&e.moveTo(e.room.controller):this.collectEnergy(e)}},builder:new class extends i{run(e){this.updateWorkingState(e),e.memory.working?this.build(e):this.collectEnergy(e)}build(e){const o=e.room.find(FIND_CONSTRUCTION_SITES);if(0===o.length){const o=e.room.find(FIND_MY_SPAWNS)[0];return void(o&&e.moveTo(o))}const r=e.pos.findClosestByRange(o);r&&e.build(r)===ERR_NOT_IN_RANGE&&e.moveTo(r)}},harvester:new class extends i{run(e){this.updateWorkingState(e),e.memory.working?this.deliverEnergy(e):this.harvest(e)}deliverEnergy(e){const o=e.room.find(FIND_STRUCTURES,{filter:e=>(e.structureType===STRUCTURE_SPAWN||e.structureType===STRUCTURE_EXTENSION)&&e.store.getFreeCapacity(RESOURCE_ENERGY)>0});o.length>0&&e.transfer(o[0],RESOURCE_ENERGY)===ERR_NOT_IN_RANGE&&e.moveTo(o[0])}harvest(e){const o=e.memory.sourceId;let r=o?Game.getObjectById(o):null;if(!r){if(r=e.pos.findClosestByPath(FIND_SOURCES),!r)return void e.say("❓ no src");e.memory.sourceId=r.id,e.say("🔁")}e.harvest(r)===ERR_NOT_IN_RANGE&&e.moveTo(r)}}};exports.loop=function(){var o;!function(){for(const e in Memory.creeps)e in Game.creeps||(delete Memory.creeps[e],console.log(`🧹 Cleaned up memory for dead creep: ${e}`))}(),function(){if(Game.time%10==0)for(const o of Object.values(Game.rooms)){const r=e(o);for(const e of Object.keys(r)){const o=r[e],t=Object.values(Game.creeps).filter((o=>o.memory.role!==e&&(!o.memory.lockUntil||Game.time>=o.memory.lockUntil)&&m(o,e))),n={harvester:0,upgrader:0,builder:0};for(const e of Object.values(Game.creeps))n[e.memory.role]=(n[e.memory.role]||0)+1;if(n[e]>=o)continue;const s=t.find((e=>n[e.memory.role]>r[e.memory.role]));if(s){console.log(`🔁 ${s.name}: ${s.memory.role} → ${e}`),s.memory.role=e,s.memory.lockUntil=Game.time+100;break}console.log(`⚠️ No reassignable creeps found for role '${e}'`),console.log(`  Needed: ${o}, Current: ${n[e]}`),console.log("  Candidates:",t.map((e=>`${e.name} (${e.memory.role})`)))}}}();const r=Object.values(Game.spawns)[0];r&&function(o){const r=e(o.room);if(0===Object.values(Game.creeps).filter((e=>"harvester"===e.memory.role)).length&&o.store[RESOURCE_ENERGY]>=200){const e=`emergency_harvester_${Game.time}`;if(o.spawnCreep([WORK,CARRY,MOVE],e,{memory:{role:"harvester"}})===OK)return void console.log(`🆘 Emergency harvester spawned: ${e}`)}for(const e of Object.keys(r)){const t=r[e];if(Object.values(Game.creeps).filter((o=>o.memory.role===e)).length<t){const r=o.room.energyAvailable,t=n(e,r),l=`${e}_${Game.time}`;let c;if("harvester"===e){const r=s(o.room);if(!r){console.log("❌ No available source for harvester");continue}c=o.spawnCreep(t,l,{memory:{role:e,sourceId:r}}),c===OK&&console.log(`Spawning harvester: ${l} → source ${r}`)}else c=o.spawnCreep(t,l,{memory:{role:e}}),c===OK&&console.log(`Spawning ${e}: ${l}`);if(c===OK)break}}}(r);for(const e of Object.values(Game.rooms))c(e);for(const e in Game.creeps){const r=Game.creeps[e],t=r.memory.role;null===(o=a[t])||void 0===o||o.run(r)}};
